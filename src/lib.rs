#![allow(non_camel_case_types, non_snake_case)]

extern crate libc;
use libc::{size_t, FILE};

/* automatically generated by rust-bindgen */

pub type Oid = ::libc::c_uint;
pub type pg_int64 = ::libc::c_long;
pub type Enum_Unnamed1 = ::libc::c_uint;
pub const CONNECTION_OK: ::libc::c_uint = 0;
pub const CONNECTION_BAD: ::libc::c_uint = 1;
pub const CONNECTION_STARTED: ::libc::c_uint = 2;
pub const CONNECTION_MADE: ::libc::c_uint = 3;
pub const CONNECTION_AWAITING_RESPONSE: ::libc::c_uint = 4;
pub const CONNECTION_AUTH_OK: ::libc::c_uint = 5;
pub const CONNECTION_SETENV: ::libc::c_uint = 6;
pub const CONNECTION_SSL_STARTUP: ::libc::c_uint = 7;
pub const CONNECTION_NEEDED: ::libc::c_uint = 8;
pub type ConnStatusType = Enum_Unnamed1;
pub type Enum_Unnamed2 = ::libc::c_uint;
pub const PGRES_POLLING_FAILED: ::libc::c_uint = 0;
pub const PGRES_POLLING_READING: ::libc::c_uint = 1;
pub const PGRES_POLLING_WRITING: ::libc::c_uint = 2;
pub const PGRES_POLLING_OK: ::libc::c_uint = 3;
pub const PGRES_POLLING_ACTIVE: ::libc::c_uint = 4;
pub type PostgresPollingStatusType = Enum_Unnamed2;
pub type Enum_Unnamed3 = ::libc::c_uint;
pub const PGRES_EMPTY_QUERY: ::libc::c_uint = 0;
pub const PGRES_COMMAND_OK: ::libc::c_uint = 1;
pub const PGRES_TUPLES_OK: ::libc::c_uint = 2;
pub const PGRES_COPY_OUT: ::libc::c_uint = 3;
pub const PGRES_COPY_IN: ::libc::c_uint = 4;
pub const PGRES_BAD_RESPONSE: ::libc::c_uint = 5;
pub const PGRES_NONFATAL_ERROR: ::libc::c_uint = 6;
pub const PGRES_FATAL_ERROR: ::libc::c_uint = 7;
pub const PGRES_COPY_BOTH: ::libc::c_uint = 8;
pub const PGRES_SINGLE_TUPLE: ::libc::c_uint = 9;
pub type ExecStatusType = Enum_Unnamed3;
pub type Enum_Unnamed4 = ::libc::c_uint;
pub const PQTRANS_IDLE: ::libc::c_uint = 0;
pub const PQTRANS_ACTIVE: ::libc::c_uint = 1;
pub const PQTRANS_INTRANS: ::libc::c_uint = 2;
pub const PQTRANS_INERROR: ::libc::c_uint = 3;
pub const PQTRANS_UNKNOWN: ::libc::c_uint = 4;
pub type PGTransactionStatusType = Enum_Unnamed4;
pub type Enum_Unnamed5 = ::libc::c_uint;
pub const PQERRORS_TERSE: ::libc::c_uint = 0;
pub const PQERRORS_DEFAULT: ::libc::c_uint = 1;
pub const PQERRORS_VERBOSE: ::libc::c_uint = 2;
pub type PGVerbosity = Enum_Unnamed5;
pub type Enum_Unnamed6 = ::libc::c_uint;
pub const PQPING_OK: ::libc::c_uint = 0;
pub const PQPING_REJECT: ::libc::c_uint = 1;
pub const PQPING_NO_RESPONSE: ::libc::c_uint = 2;
pub const PQPING_NO_ATTEMPT: ::libc::c_uint = 3;
pub type PGPing = Enum_Unnamed6;
pub enum Struct_pg_conn { }
pub type PGconn = Struct_pg_conn;
pub enum Struct_pg_result { }
pub type PGresult = Struct_pg_result;
pub enum Struct_pg_cancel { }
pub type PGcancel = Struct_pg_cancel;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_pgNotify {
    pub relname: *mut ::libc::c_char,
    pub be_pid: ::libc::c_int,
    pub extra: *mut ::libc::c_char,
    pub next: *mut Struct_pgNotify,
}
impl ::std::clone::Clone for Struct_pgNotify {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_pgNotify {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type PGnotify = Struct_pgNotify;
pub type PQnoticeReceiver =
    ::std::option::Option<extern "C" fn(arg: *mut ::libc::c_void,
                                        res: *const PGresult) -> ()>;
pub type PQnoticeProcessor =
    ::std::option::Option<extern "C" fn(arg: *mut ::libc::c_void,
                                        message: *const ::libc::c_char)
                              -> ()>;
pub type pqbool = ::libc::c_char;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__PQprintOpt {
    pub header: pqbool,
    pub align: pqbool,
    pub standard: pqbool,
    pub html3: pqbool,
    pub expanded: pqbool,
    pub pager: pqbool,
    pub fieldSep: *mut ::libc::c_char,
    pub tableOpt: *mut ::libc::c_char,
    pub caption: *mut ::libc::c_char,
    pub fieldName: *mut *mut ::libc::c_char,
}
impl ::std::clone::Clone for Struct__PQprintOpt {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__PQprintOpt {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type PQprintOpt = Struct__PQprintOpt;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__PQconninfoOption {
    pub keyword: *mut ::libc::c_char,
    pub envvar: *mut ::libc::c_char,
    pub compiled: *mut ::libc::c_char,
    pub val: *mut ::libc::c_char,
    pub label: *mut ::libc::c_char,
    pub dispchar: *mut ::libc::c_char,
    pub dispsize: ::libc::c_int,
}
impl ::std::clone::Clone for Struct__PQconninfoOption {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__PQconninfoOption {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type PQconninfoOption = Struct__PQconninfoOption;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed7 {
    pub len: ::libc::c_int,
    pub isint: ::libc::c_int,
    pub u: Union_Unnamed8,
}
impl ::std::clone::Clone for Struct_Unnamed7 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed7 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Union_Unnamed8 {
    pub _bindgen_data_: [u64; 1usize],
}
impl Union_Unnamed8 {
    pub unsafe fn ptr(&mut self) -> *mut *mut ::libc::c_int {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn integer(&mut self) -> *mut ::libc::c_int {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for Union_Unnamed8 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Union_Unnamed8 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type PQArgBlock = Struct_Unnamed7;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_pgresAttDesc {
    pub name: *mut ::libc::c_char,
    pub tableid: Oid,
    pub columnid: ::libc::c_int,
    pub format: ::libc::c_int,
    pub typid: Oid,
    pub typlen: ::libc::c_int,
    pub atttypmod: ::libc::c_int,
}
impl ::std::clone::Clone for Struct_pgresAttDesc {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_pgresAttDesc {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type PGresAttDesc = Struct_pgresAttDesc;
pub type pgthreadlock_t =
    ::std::option::Option<extern "C" fn(acquire: ::libc::c_int) -> ()>;

extern "C" {
    pub fn PQconnectStart(conninfo: *const ::libc::c_char) -> *mut PGconn;
    pub fn PQconnectStartParams(keywords: *const *const ::libc::c_char,
                                values: *const *const ::libc::c_char,
                                expand_dbname: ::libc::c_int) -> *mut PGconn;
    pub fn PQconnectPoll(conn: *mut PGconn) -> PostgresPollingStatusType;
    pub fn PQconnectdb(conninfo: *const ::libc::c_char) -> *mut PGconn;
    pub fn PQconnectdbParams(keywords: *const *const ::libc::c_char,
                             values: *const *const ::libc::c_char,
                             expand_dbname: ::libc::c_int) -> *mut PGconn;
    pub fn PQsetdbLogin(pghost: *const ::libc::c_char,
                        pgport: *const ::libc::c_char,
                        pgoptions: *const ::libc::c_char,
                        pgtty: *const ::libc::c_char,
                        dbName: *const ::libc::c_char,
                        login: *const ::libc::c_char,
                        pwd: *const ::libc::c_char) -> *mut PGconn;
    pub fn PQfinish(conn: *mut PGconn) -> ();
    pub fn PQconndefaults() -> *mut PQconninfoOption;
    pub fn PQconninfoParse(conninfo: *const ::libc::c_char,
                           errmsg: *mut *mut ::libc::c_char)
     -> *mut PQconninfoOption;
    pub fn PQconninfo(conn: *mut PGconn) -> *mut PQconninfoOption;
    pub fn PQconninfoFree(connOptions: *mut PQconninfoOption) -> ();
    pub fn PQresetStart(conn: *mut PGconn) -> ::libc::c_int;
    pub fn PQresetPoll(conn: *mut PGconn) -> PostgresPollingStatusType;
    pub fn PQreset(conn: *mut PGconn) -> ();
    pub fn PQgetCancel(conn: *mut PGconn) -> *mut PGcancel;
    pub fn PQfreeCancel(cancel: *mut PGcancel) -> ();
    pub fn PQcancel(cancel: *mut PGcancel, errbuf: *mut ::libc::c_char,
                    errbufsize: ::libc::c_int) -> ::libc::c_int;
    pub fn PQrequestCancel(conn: *mut PGconn) -> ::libc::c_int;
    pub fn PQdb(conn: *const PGconn) -> *mut ::libc::c_char;
    pub fn PQuser(conn: *const PGconn) -> *mut ::libc::c_char;
    pub fn PQpass(conn: *const PGconn) -> *mut ::libc::c_char;
    pub fn PQhost(conn: *const PGconn) -> *mut ::libc::c_char;
    pub fn PQport(conn: *const PGconn) -> *mut ::libc::c_char;
    pub fn PQtty(conn: *const PGconn) -> *mut ::libc::c_char;
    pub fn PQoptions(conn: *const PGconn) -> *mut ::libc::c_char;
    pub fn PQstatus(conn: *const PGconn) -> ConnStatusType;
    pub fn PQtransactionStatus(conn: *const PGconn)
     -> PGTransactionStatusType;
    pub fn PQparameterStatus(conn: *const PGconn,
                             paramName: *const ::libc::c_char)
     -> *const ::libc::c_char;
    pub fn PQprotocolVersion(conn: *const PGconn) -> ::libc::c_int;
    pub fn PQserverVersion(conn: *const PGconn) -> ::libc::c_int;
    pub fn PQerrorMessage(conn: *const PGconn) -> *mut ::libc::c_char;
    pub fn PQsocket(conn: *const PGconn) -> ::libc::c_int;
    pub fn PQbackendPID(conn: *const PGconn) -> ::libc::c_int;
    pub fn PQconnectionNeedsPassword(conn: *const PGconn) -> ::libc::c_int;
    pub fn PQconnectionUsedPassword(conn: *const PGconn) -> ::libc::c_int;
    pub fn PQclientEncoding(conn: *const PGconn) -> ::libc::c_int;
    pub fn PQsetClientEncoding(conn: *mut PGconn,
                               encoding: *const ::libc::c_char)
     -> ::libc::c_int;
    pub fn PQgetssl(conn: *mut PGconn) -> *mut ::libc::c_void;
    pub fn PQinitSSL(do_init: ::libc::c_int) -> ();
    pub fn PQinitOpenSSL(do_ssl: ::libc::c_int, do_crypto: ::libc::c_int)
     -> ();
    pub fn PQsetErrorVerbosity(conn: *mut PGconn, verbosity: PGVerbosity)
     -> PGVerbosity;
    pub fn PQtrace(conn: *mut PGconn, debug_port: *mut FILE) -> ();
    pub fn PQuntrace(conn: *mut PGconn) -> ();
    pub fn PQsetNoticeReceiver(conn: *mut PGconn, _proc: PQnoticeReceiver,
                               arg: *mut ::libc::c_void) -> PQnoticeReceiver;
    pub fn PQsetNoticeProcessor(conn: *mut PGconn, _proc: PQnoticeProcessor,
                                arg: *mut ::libc::c_void)
     -> PQnoticeProcessor;
    pub fn PQregisterThreadLock(newhandler: pgthreadlock_t) -> pgthreadlock_t;
    pub fn PQexec(conn: *mut PGconn, query: *const ::libc::c_char)
     -> *mut PGresult;
    pub fn PQexecParams(conn: *mut PGconn, command: *const ::libc::c_char,
                        nParams: ::libc::c_int, paramTypes: *const Oid,
                        paramValues: *const *const ::libc::c_char,
                        paramLengths: *const ::libc::c_int,
                        paramFormats: *const ::libc::c_int,
                        resultFormat: ::libc::c_int) -> *mut PGresult;
    pub fn PQprepare(conn: *mut PGconn, stmtName: *const ::libc::c_char,
                     query: *const ::libc::c_char, nParams: ::libc::c_int,
                     paramTypes: *const Oid) -> *mut PGresult;
    pub fn PQexecPrepared(conn: *mut PGconn, stmtName: *const ::libc::c_char,
                          nParams: ::libc::c_int,
                          paramValues: *const *const ::libc::c_char,
                          paramLengths: *const ::libc::c_int,
                          paramFormats: *const ::libc::c_int,
                          resultFormat: ::libc::c_int) -> *mut PGresult;
    pub fn PQsendQuery(conn: *mut PGconn, query: *const ::libc::c_char)
     -> ::libc::c_int;
    pub fn PQsendQueryParams(conn: *mut PGconn,
                             command: *const ::libc::c_char,
                             nParams: ::libc::c_int, paramTypes: *const Oid,
                             paramValues: *const *const ::libc::c_char,
                             paramLengths: *const ::libc::c_int,
                             paramFormats: *const ::libc::c_int,
                             resultFormat: ::libc::c_int) -> ::libc::c_int;
    pub fn PQsendPrepare(conn: *mut PGconn, stmtName: *const ::libc::c_char,
                         query: *const ::libc::c_char, nParams: ::libc::c_int,
                         paramTypes: *const Oid) -> ::libc::c_int;
    pub fn PQsendQueryPrepared(conn: *mut PGconn,
                               stmtName: *const ::libc::c_char,
                               nParams: ::libc::c_int,
                               paramValues: *const *const ::libc::c_char,
                               paramLengths: *const ::libc::c_int,
                               paramFormats: *const ::libc::c_int,
                               resultFormat: ::libc::c_int) -> ::libc::c_int;
    pub fn PQsetSingleRowMode(conn: *mut PGconn) -> ::libc::c_int;
    pub fn PQgetResult(conn: *mut PGconn) -> *mut PGresult;
    pub fn PQisBusy(conn: *mut PGconn) -> ::libc::c_int;
    pub fn PQconsumeInput(conn: *mut PGconn) -> ::libc::c_int;
    pub fn PQnotifies(conn: *mut PGconn) -> *mut PGnotify;
    pub fn PQputCopyData(conn: *mut PGconn, buffer: *const ::libc::c_char,
                         nbytes: ::libc::c_int) -> ::libc::c_int;
    pub fn PQputCopyEnd(conn: *mut PGconn, errormsg: *const ::libc::c_char)
     -> ::libc::c_int;
    pub fn PQgetCopyData(conn: *mut PGconn, buffer: *mut *mut ::libc::c_char,
                         async: ::libc::c_int) -> ::libc::c_int;
    pub fn PQgetline(conn: *mut PGconn, string: *mut ::libc::c_char,
                     length: ::libc::c_int) -> ::libc::c_int;
    pub fn PQputline(conn: *mut PGconn, string: *const ::libc::c_char)
     -> ::libc::c_int;
    pub fn PQgetlineAsync(conn: *mut PGconn, buffer: *mut ::libc::c_char,
                          bufsize: ::libc::c_int) -> ::libc::c_int;
    pub fn PQputnbytes(conn: *mut PGconn, buffer: *const ::libc::c_char,
                       nbytes: ::libc::c_int) -> ::libc::c_int;
    pub fn PQendcopy(conn: *mut PGconn) -> ::libc::c_int;
    pub fn PQsetnonblocking(conn: *mut PGconn, arg: ::libc::c_int)
     -> ::libc::c_int;
    pub fn PQisnonblocking(conn: *const PGconn) -> ::libc::c_int;
    pub fn PQisthreadsafe() -> ::libc::c_int;
    pub fn PQping(conninfo: *const ::libc::c_char) -> PGPing;
    pub fn PQpingParams(keywords: *const *const ::libc::c_char,
                        values: *const *const ::libc::c_char,
                        expand_dbname: ::libc::c_int) -> PGPing;
    pub fn PQflush(conn: *mut PGconn) -> ::libc::c_int;
    pub fn PQfn(conn: *mut PGconn, fnid: ::libc::c_int,
                result_buf: *mut ::libc::c_int,
                result_len: *mut ::libc::c_int, result_is_int: ::libc::c_int,
                args: *const PQArgBlock, nargs: ::libc::c_int)
     -> *mut PGresult;
    pub fn PQresultStatus(res: *const PGresult) -> ExecStatusType;
    pub fn PQresStatus(status: ExecStatusType) -> *mut ::libc::c_char;
    pub fn PQresultErrorMessage(res: *const PGresult) -> *mut ::libc::c_char;
    pub fn PQresultErrorField(res: *const PGresult, fieldcode: ::libc::c_int)
     -> *mut ::libc::c_char;
    pub fn PQntuples(res: *const PGresult) -> ::libc::c_int;
    pub fn PQnfields(res: *const PGresult) -> ::libc::c_int;
    pub fn PQbinaryTuples(res: *const PGresult) -> ::libc::c_int;
    pub fn PQfname(res: *const PGresult, field_num: ::libc::c_int)
     -> *mut ::libc::c_char;
    pub fn PQfnumber(res: *const PGresult, field_name: *const ::libc::c_char)
     -> ::libc::c_int;
    pub fn PQftable(res: *const PGresult, field_num: ::libc::c_int) -> Oid;
    pub fn PQftablecol(res: *const PGresult, field_num: ::libc::c_int)
     -> ::libc::c_int;
    pub fn PQfformat(res: *const PGresult, field_num: ::libc::c_int)
     -> ::libc::c_int;
    pub fn PQftype(res: *const PGresult, field_num: ::libc::c_int) -> Oid;
    pub fn PQfsize(res: *const PGresult, field_num: ::libc::c_int)
     -> ::libc::c_int;
    pub fn PQfmod(res: *const PGresult, field_num: ::libc::c_int)
     -> ::libc::c_int;
    pub fn PQcmdStatus(res: *mut PGresult) -> *mut ::libc::c_char;
    pub fn PQoidStatus(res: *const PGresult) -> *mut ::libc::c_char;
    pub fn PQoidValue(res: *const PGresult) -> Oid;
    pub fn PQcmdTuples(res: *mut PGresult) -> *mut ::libc::c_char;
    pub fn PQgetvalue(res: *const PGresult, tup_num: ::libc::c_int,
                      field_num: ::libc::c_int) -> *mut ::libc::c_char;
    pub fn PQgetlength(res: *const PGresult, tup_num: ::libc::c_int,
                       field_num: ::libc::c_int) -> ::libc::c_int;
    pub fn PQgetisnull(res: *const PGresult, tup_num: ::libc::c_int,
                       field_num: ::libc::c_int) -> ::libc::c_int;
    pub fn PQnparams(res: *const PGresult) -> ::libc::c_int;
    pub fn PQparamtype(res: *const PGresult, param_num: ::libc::c_int) -> Oid;
    pub fn PQdescribePrepared(conn: *mut PGconn, stmt: *const ::libc::c_char)
     -> *mut PGresult;
    pub fn PQdescribePortal(conn: *mut PGconn, portal: *const ::libc::c_char)
     -> *mut PGresult;
    pub fn PQsendDescribePrepared(conn: *mut PGconn,
                                  stmt: *const ::libc::c_char)
     -> ::libc::c_int;
    pub fn PQsendDescribePortal(conn: *mut PGconn,
                                portal: *const ::libc::c_char)
     -> ::libc::c_int;
    pub fn PQclear(res: *mut PGresult) -> ();
    pub fn PQfreemem(ptr: *mut ::libc::c_void) -> ();
    pub fn PQmakeEmptyPGresult(conn: *mut PGconn, status: ExecStatusType)
     -> *mut PGresult;
    pub fn PQcopyResult(src: *const PGresult, flags: ::libc::c_int)
     -> *mut PGresult;
    pub fn PQsetResultAttrs(res: *mut PGresult, numAttributes: ::libc::c_int,
                            attDescs: *mut PGresAttDesc) -> ::libc::c_int;
    pub fn PQresultAlloc(res: *mut PGresult, nBytes: size_t)
     -> *mut ::libc::c_void;
    pub fn PQsetvalue(res: *mut PGresult, tup_num: ::libc::c_int,
                      field_num: ::libc::c_int, value: *mut ::libc::c_char,
                      len: ::libc::c_int) -> ::libc::c_int;
    pub fn PQescapeStringConn(conn: *mut PGconn, to: *mut ::libc::c_char,
                              from: *const ::libc::c_char, length: size_t,
                              error: *mut ::libc::c_int) -> size_t;
    pub fn PQescapeLiteral(conn: *mut PGconn, str: *const ::libc::c_char,
                           len: size_t) -> *mut ::libc::c_char;
    pub fn PQescapeIdentifier(conn: *mut PGconn, str: *const ::libc::c_char,
                              len: size_t) -> *mut ::libc::c_char;
    pub fn PQescapeByteaConn(conn: *mut PGconn, from: *const ::libc::c_uchar,
                             from_length: size_t, to_length: *mut size_t)
     -> *mut ::libc::c_uchar;
    pub fn PQunescapeBytea(strtext: *const ::libc::c_uchar,
                           retbuflen: *mut size_t) -> *mut ::libc::c_uchar;
    pub fn PQescapeString(to: *mut ::libc::c_char,
                          from: *const ::libc::c_char, length: size_t)
     -> size_t;
    pub fn PQescapeBytea(from: *const ::libc::c_uchar, from_length: size_t,
                         to_length: *mut size_t) -> *mut ::libc::c_uchar;
    pub fn PQprint(fout: *mut FILE, res: *const PGresult,
                   ps: *const PQprintOpt) -> ();
    pub fn PQdisplayTuples(res: *const PGresult, fp: *mut FILE,
                           fillAlign: ::libc::c_int,
                           fieldSep: *const ::libc::c_char,
                           printHeader: ::libc::c_int, quiet: ::libc::c_int)
     -> ();
    pub fn PQprintTuples(res: *const PGresult, fout: *mut FILE,
                         printAttName: ::libc::c_int,
                         terseOutput: ::libc::c_int, width: ::libc::c_int)
     -> ();
    pub fn lo_open(conn: *mut PGconn, lobjId: Oid, mode: ::libc::c_int)
     -> ::libc::c_int;
    pub fn lo_close(conn: *mut PGconn, fd: ::libc::c_int) -> ::libc::c_int;
    pub fn lo_read(conn: *mut PGconn, fd: ::libc::c_int,
                   buf: *mut ::libc::c_char, len: size_t) -> ::libc::c_int;
    pub fn lo_write(conn: *mut PGconn, fd: ::libc::c_int,
                    buf: *const ::libc::c_char, len: size_t) -> ::libc::c_int;
    pub fn lo_lseek(conn: *mut PGconn, fd: ::libc::c_int,
                    offset: ::libc::c_int, whence: ::libc::c_int)
     -> ::libc::c_int;
    pub fn lo_lseek64(conn: *mut PGconn, fd: ::libc::c_int, offset: pg_int64,
                      whence: ::libc::c_int) -> pg_int64;
    pub fn lo_creat(conn: *mut PGconn, mode: ::libc::c_int) -> Oid;
    pub fn lo_create(conn: *mut PGconn, lobjId: Oid) -> Oid;
    pub fn lo_tell(conn: *mut PGconn, fd: ::libc::c_int) -> ::libc::c_int;
    pub fn lo_tell64(conn: *mut PGconn, fd: ::libc::c_int) -> pg_int64;
    pub fn lo_truncate(conn: *mut PGconn, fd: ::libc::c_int, len: size_t)
     -> ::libc::c_int;
    pub fn lo_truncate64(conn: *mut PGconn, fd: ::libc::c_int, len: pg_int64)
     -> ::libc::c_int;
    pub fn lo_unlink(conn: *mut PGconn, lobjId: Oid) -> ::libc::c_int;
    pub fn lo_import(conn: *mut PGconn, filename: *const ::libc::c_char)
     -> Oid;
    pub fn lo_import_with_oid(conn: *mut PGconn,
                              filename: *const ::libc::c_char, lobjId: Oid)
     -> Oid;
    pub fn lo_export(conn: *mut PGconn, lobjId: Oid,
                     filename: *const ::libc::c_char) -> ::libc::c_int;
    pub fn PQlibVersion() -> ::libc::c_int;
    pub fn PQmblen(s: *const ::libc::c_char, encoding: ::libc::c_int)
     -> ::libc::c_int;
    pub fn PQdsplen(s: *const ::libc::c_char, encoding: ::libc::c_int)
     -> ::libc::c_int;
    pub fn PQenv2encoding() -> ::libc::c_int;
    pub fn PQencryptPassword(passwd: *const ::libc::c_char,
                             user: *const ::libc::c_char)
     -> *mut ::libc::c_char;
    pub fn pg_char_to_encoding(name: *const ::libc::c_char) -> ::libc::c_int;
    pub fn pg_encoding_to_char(encoding: ::libc::c_int)
     -> *const ::libc::c_char;
    pub fn pg_valid_server_encoding_id(encoding: ::libc::c_int)
     -> ::libc::c_int;
}
